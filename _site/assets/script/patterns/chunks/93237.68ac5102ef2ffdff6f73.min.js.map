{"version":3,"file":"chunks/93237.68ac5102ef2ffdff6f73.min.js","mappings":"8PAIA,MAAMA,EAAc,EAAAC,UAAA,OAAiB,CACjCC,KAAM,cACNC,aACI,MAAO,CACHC,iBAAkB,kBAClBC,eAAgB,WAChBC,YAAa,oBACbC,sBAAsB,EACtBC,iBAAiB,EACjBC,iBAAiB,EAEzB,EACAC,wBACI,MAAO,CACH,IAAI,KAAO,CACPC,MAAO,CACHC,YAAa,EAAGC,MAAKC,gBACjB,MAAMC,EAASC,KAAKC,OAAOC,aAAeF,KAAKG,QAAQZ,sBACjD,OAAEa,GAAWN,EACbF,EAAc,GACpB,IAAKG,EACD,OAAO,KAGX,MAAMM,EAAmBR,EAAIS,KAAKC,gBAC5BC,GAAiBH,aAA2D,EAASA,EAAiBI,WAAWZ,KACxD,OAAxDQ,EAAiBK,QAAQC,cAAcd,EAAIa,SAwBlD,OAvBAb,EAAIe,aAAY,CAACC,EAAMC,KACnB,MAAMC,EAAYX,GAAUU,GAAOV,GAAUU,EAAMD,EAAKG,SAClDC,GAAWJ,EAAKK,SAAWL,EAAKM,WACtC,IAAKJ,IAAcf,KAAKG,QAAQX,kBAAoByB,EAAS,CACzD,MAAMG,EAAU,CAACpB,KAAKG,QAAQd,gBAC1BmB,GACAY,EAAQC,KAAKrB,KAAKG,QAAQf,kBAE9B,MAAMkC,EAAa,SAAgBR,EAAKA,EAAMD,EAAKG,SAAU,CACzDO,MAAOH,EAAQI,KAAK,KACpB,mBAAwD,mBAA7BxB,KAAKG,QAAQb,YAClCU,KAAKG,QAAQb,YAAY,CACvBW,OAAQD,KAAKC,OACbY,OACAC,MACAC,cAEFf,KAAKG,QAAQb,cAEvBM,EAAYyB,KAAKC,EACrB,CACA,OAAOtB,KAAKG,QAAQV,eAAe,IAEhC,YAAqBI,EAAKD,EAAY,KAKjE,G","sources":["webpack://@patternslib/patternslib/./node_modules/@tiptap/extension-placeholder/dist/index.js"],"sourcesContent":["import { Extension } from '@tiptap/core';\nimport { Plugin } from '@tiptap/pm/state';\nimport { Decoration, DecorationSet } from '@tiptap/pm/view';\n\nconst Placeholder = Extension.create({\r\n    name: 'placeholder',\r\n    addOptions() {\r\n        return {\r\n            emptyEditorClass: 'is-editor-empty',\r\n            emptyNodeClass: 'is-empty',\r\n            placeholder: 'Write something â€¦',\r\n            showOnlyWhenEditable: true,\r\n            showOnlyCurrent: true,\r\n            includeChildren: false,\r\n        };\r\n    },\r\n    addProseMirrorPlugins() {\r\n        return [\r\n            new Plugin({\r\n                props: {\r\n                    decorations: ({ doc, selection }) => {\r\n                        const active = this.editor.isEditable || !this.options.showOnlyWhenEditable;\r\n                        const { anchor } = selection;\r\n                        const decorations = [];\r\n                        if (!active) {\r\n                            return null;\r\n                        }\r\n                        // only calculate isEmpty once due to its performance impacts (see issue #3360)\r\n                        const emptyDocInstance = doc.type.createAndFill();\r\n                        const isEditorEmpty = (emptyDocInstance === null || emptyDocInstance === void 0 ? void 0 : emptyDocInstance.sameMarkup(doc))\r\n                            && emptyDocInstance.content.findDiffStart(doc.content) === null;\r\n                        doc.descendants((node, pos) => {\r\n                            const hasAnchor = anchor >= pos && anchor <= pos + node.nodeSize;\r\n                            const isEmpty = !node.isLeaf && !node.childCount;\r\n                            if ((hasAnchor || !this.options.showOnlyCurrent) && isEmpty) {\r\n                                const classes = [this.options.emptyNodeClass];\r\n                                if (isEditorEmpty) {\r\n                                    classes.push(this.options.emptyEditorClass);\r\n                                }\r\n                                const decoration = Decoration.node(pos, pos + node.nodeSize, {\r\n                                    class: classes.join(' '),\r\n                                    'data-placeholder': typeof this.options.placeholder === 'function'\r\n                                        ? this.options.placeholder({\r\n                                            editor: this.editor,\r\n                                            node,\r\n                                            pos,\r\n                                            hasAnchor,\r\n                                        })\r\n                                        : this.options.placeholder,\r\n                                });\r\n                                decorations.push(decoration);\r\n                            }\r\n                            return this.options.includeChildren;\r\n                        });\r\n                        return DecorationSet.create(doc, decorations);\r\n                    },\r\n                },\r\n            }),\r\n        ];\r\n    },\r\n});\n\nexport { Placeholder, Placeholder as default };\n//# sourceMappingURL=index.js.map\n"],"names":["Placeholder","Extension","name","addOptions","emptyEditorClass","emptyNodeClass","placeholder","showOnlyWhenEditable","showOnlyCurrent","includeChildren","addProseMirrorPlugins","props","decorations","doc","selection","active","this","editor","isEditable","options","anchor","emptyDocInstance","type","createAndFill","isEditorEmpty","sameMarkup","content","findDiffStart","descendants","node","pos","hasAnchor","nodeSize","isEmpty","isLeaf","childCount","classes","push","decoration","class","join"],"sourceRoot":""}
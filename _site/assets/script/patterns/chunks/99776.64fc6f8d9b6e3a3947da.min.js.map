{"version":3,"file":"chunks/99776.64fc6f8d9b6e3a3947da.min.js","mappings":"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","sources":["webpack://@patternslib/patternslib/./node_modules/@patternslib/pat-tiptap/src/context_menu.js","webpack://@patternslib/patternslib/./node_modules/@tiptap/suggestion/dist/index.js","webpack://@patternslib/patternslib/./node_modules/@patternslib/pat-tiptap/src/extensions/suggestion.js","webpack://@patternslib/patternslib/./node_modules/@patternslib/pat-tiptap/src/focus-handler.js","webpack://@patternslib/patternslib/./node_modules/@patternslib/pat-tiptap/src/utils.js"],"sourcesContent":["import registry from \"@patternslib/patternslib/src/core/registry\";\nimport dom from \"@patternslib/patternslib/src/core/dom\";\nimport events from \"@patternslib/patternslib/src/core/events\";\nimport patTooltip from \"@patternslib/patternslib/src/pat/tooltip/tooltip\";\nimport { posToDOMRect } from \"@tiptap/core\";\n\nlet PREV_NODE = null;\n\nexport async function context_menu({\n    url,\n    editor,\n    instance = null,\n    pattern = null,\n    extra_class = null,\n}) {\n    const prev_node = PREV_NODE;\n    const cur_node = (PREV_NODE = editor.state.doc.nodeAt(editor.state.selection.from));\n\n    if (\n        instance !== null &&\n        (cur_node !== prev_node || !instance?.tippy.popperInstance)\n    ) {\n        // Close context menu, when new node is selected.\n        await context_menu_close({\n            instance: instance,\n            pattern_name: pattern.name,\n        });\n        instance = null;\n    }\n\n    if (!instance || !instance?.tippy.popperInstance) {\n        // Only re-initialize when not already opened.\n\n        // 1) Dynamically register a pattern to be used in the context menu\n        //    We need to unregister it after use in ``context_menu_close``\n        //    to allow multiple tiptap editors on the same page because it\n        //    references the current editor instance.\n        if (pattern) {\n            registry.patterns[pattern.name] = pattern;\n        }\n\n        // 2) Initialize the tooltip\n        const editor_element = editor.options.element;\n        instance = await new patTooltip(editor_element, {\n            \"source\": \"ajax\",\n            \"url\": url,\n            \"trigger\": \"none\",\n            \"class\": extra_class,\n            \"position-list\": [\"tl\"],\n        });\n\n        await events.await_pattern_init(instance);\n\n        const reference_position = posToDOMRect(\n            editor.view,\n            editor.state.selection.from,\n            editor.state.selection.to\n        );\n\n        instance.tippy?.setProps({\n            // NOTE: getReferenceClientRect is called after each setContent.\n            getReferenceClientRect: () => reference_position,\n        });\n\n        events.add_event_listener(\n            document,\n            \"mousedown\",\n            \"tiptap--context_menu_close--click\",\n            async (e) => {\n                if (\n                    [e.target, ...dom.get_parents(e.target)].includes(\n                        instance?.tippy.popper\n                    )\n                ) {\n                    // Do not close the context menu if we click in it.\n                    return;\n                }\n                await context_menu_close({\n                    instance: instance,\n                    pattern_name: pattern.name,\n                });\n                instance = null;\n            }\n        );\n        events.add_event_listener(\n            document,\n            \"keydown\",\n            \"tiptap--context_menu_close--esc\",\n            async (e) => {\n                if (e.key !== \"Escape\") {\n                    // Not a closing key.\n                    return;\n                }\n                await context_menu_close({\n                    instance: instance,\n                    pattern_name: pattern.name,\n                });\n                instance = null;\n            }\n        );\n\n        instance.show();\n    } else {\n        instance.get_content(url);\n    }\n\n    return instance;\n}\n\nexport async function context_menu_close({ instance, pattern_name }) {\n    // Hide and destroy the context menu / tooltip instance\n    if (instance) {\n        await instance.hide();\n        instance.destroy();\n        instance = null;\n    }\n\n    // Unregister the pattern\n    if (pattern_name) {\n        delete registry.patterns[pattern_name];\n    }\n    events.remove_event_listener(document, \"tiptap--context_menu_close--click\");\n    events.remove_event_listener(document, \"tiptap--context_menu_close--esc\");\n    return null;\n}\n","import { PluginKey, Plugin } from '@tiptap/pm/state';\nimport { DecorationSet, Decoration } from '@tiptap/pm/view';\nimport { escapeForRegEx } from '@tiptap/core';\n\nfunction findSuggestionMatch(config) {\r\n    var _a;\r\n    const { char, allowSpaces, allowedPrefixes, startOfLine, $position, } = config;\r\n    const escapedChar = escapeForRegEx(char);\r\n    const suffix = new RegExp(`\\\\s${escapedChar}$`);\r\n    const prefix = startOfLine ? '^' : '';\r\n    const regexp = allowSpaces\r\n        ? new RegExp(`${prefix}${escapedChar}.*?(?=\\\\s${escapedChar}|$)`, 'gm')\r\n        : new RegExp(`${prefix}(?:^)?${escapedChar}[^\\\\s${escapedChar}]*`, 'gm');\r\n    const text = ((_a = $position.nodeBefore) === null || _a === void 0 ? void 0 : _a.isText) && $position.nodeBefore.text;\r\n    if (!text) {\r\n        return null;\r\n    }\r\n    const textFrom = $position.pos - text.length;\r\n    const match = Array.from(text.matchAll(regexp)).pop();\r\n    if (!match || match.input === undefined || match.index === undefined) {\r\n        return null;\r\n    }\r\n    // JavaScript doesn't have lookbehinds. This hacks a check that first character\r\n    // is a space or the start of the line\r\n    const matchPrefix = match.input.slice(Math.max(0, match.index - 1), match.index);\r\n    const matchPrefixIsAllowed = new RegExp(`^[${allowedPrefixes === null || allowedPrefixes === void 0 ? void 0 : allowedPrefixes.join('')}\\0]?$`).test(matchPrefix);\r\n    if (allowedPrefixes !== null && !matchPrefixIsAllowed) {\r\n        return null;\r\n    }\r\n    // The absolute position of the match in the document\r\n    const from = textFrom + match.index;\r\n    let to = from + match[0].length;\r\n    // Edge case handling; if spaces are allowed and we're directly in between\r\n    // two triggers\r\n    if (allowSpaces && suffix.test(text.slice(to - 1, to + 1))) {\r\n        match[0] += ' ';\r\n        to += 1;\r\n    }\r\n    // If the $position is located within the matched substring, return that range\r\n    if (from < $position.pos && to >= $position.pos) {\r\n        return {\r\n            range: {\r\n                from,\r\n                to,\r\n            },\r\n            query: match[0].slice(char.length),\r\n            text: match[0],\r\n        };\r\n    }\r\n    return null;\r\n}\n\nconst SuggestionPluginKey = new PluginKey('suggestion');\r\nfunction Suggestion({ pluginKey = SuggestionPluginKey, editor, char = '@', allowSpaces = false, allowedPrefixes = [' '], startOfLine = false, decorationTag = 'span', decorationClass = 'suggestion', command = () => null, items = () => [], render = () => ({}), allow = () => true, }) {\r\n    let props;\r\n    const renderer = render === null || render === void 0 ? void 0 : render();\r\n    const plugin = new Plugin({\r\n        key: pluginKey,\r\n        view() {\r\n            return {\r\n                update: async (view, prevState) => {\r\n                    var _a, _b, _c, _d, _e, _f, _g;\r\n                    const prev = (_a = this.key) === null || _a === void 0 ? void 0 : _a.getState(prevState);\r\n                    const next = (_b = this.key) === null || _b === void 0 ? void 0 : _b.getState(view.state);\r\n                    // See how the state changed\r\n                    const moved = prev.active && next.active && prev.range.from !== next.range.from;\r\n                    const started = !prev.active && next.active;\r\n                    const stopped = prev.active && !next.active;\r\n                    const changed = !started && !stopped && prev.query !== next.query;\r\n                    const handleStart = started || moved;\r\n                    const handleChange = changed && !moved;\r\n                    const handleExit = stopped || moved;\r\n                    // Cancel when suggestion isn't active\r\n                    if (!handleStart && !handleChange && !handleExit) {\r\n                        return;\r\n                    }\r\n                    const state = handleExit && !handleStart ? prev : next;\r\n                    const decorationNode = view.dom.querySelector(`[data-decoration-id=\"${state.decorationId}\"]`);\r\n                    props = {\r\n                        editor,\r\n                        range: state.range,\r\n                        query: state.query,\r\n                        text: state.text,\r\n                        items: [],\r\n                        command: commandProps => {\r\n                            command({\r\n                                editor,\r\n                                range: state.range,\r\n                                props: commandProps,\r\n                            });\r\n                        },\r\n                        decorationNode,\r\n                        // virtual node for popper.js or tippy.js\r\n                        // this can be used for building popups without a DOM node\r\n                        clientRect: decorationNode\r\n                            ? () => {\r\n                                var _a;\r\n                                // because of `items` can be asynchrounous we’ll search for the current decoration node\r\n                                const { decorationId } = (_a = this.key) === null || _a === void 0 ? void 0 : _a.getState(editor.state); // eslint-disable-line\r\n                                const currentDecorationNode = view.dom.querySelector(`[data-decoration-id=\"${decorationId}\"]`);\r\n                                return (currentDecorationNode === null || currentDecorationNode === void 0 ? void 0 : currentDecorationNode.getBoundingClientRect()) || null;\r\n                            }\r\n                            : null,\r\n                    };\r\n                    if (handleStart) {\r\n                        (_c = renderer === null || renderer === void 0 ? void 0 : renderer.onBeforeStart) === null || _c === void 0 ? void 0 : _c.call(renderer, props);\r\n                    }\r\n                    if (handleChange) {\r\n                        (_d = renderer === null || renderer === void 0 ? void 0 : renderer.onBeforeUpdate) === null || _d === void 0 ? void 0 : _d.call(renderer, props);\r\n                    }\r\n                    if (handleChange || handleStart) {\r\n                        props.items = await items({\r\n                            editor,\r\n                            query: state.query,\r\n                        });\r\n                    }\r\n                    if (handleExit) {\r\n                        (_e = renderer === null || renderer === void 0 ? void 0 : renderer.onExit) === null || _e === void 0 ? void 0 : _e.call(renderer, props);\r\n                    }\r\n                    if (handleChange) {\r\n                        (_f = renderer === null || renderer === void 0 ? void 0 : renderer.onUpdate) === null || _f === void 0 ? void 0 : _f.call(renderer, props);\r\n                    }\r\n                    if (handleStart) {\r\n                        (_g = renderer === null || renderer === void 0 ? void 0 : renderer.onStart) === null || _g === void 0 ? void 0 : _g.call(renderer, props);\r\n                    }\r\n                },\r\n                destroy: () => {\r\n                    var _a;\r\n                    if (!props) {\r\n                        return;\r\n                    }\r\n                    (_a = renderer === null || renderer === void 0 ? void 0 : renderer.onExit) === null || _a === void 0 ? void 0 : _a.call(renderer, props);\r\n                },\r\n            };\r\n        },\r\n        state: {\r\n            // Initialize the plugin's internal state.\r\n            init() {\r\n                const state = {\r\n                    active: false,\r\n                    range: {\r\n                        from: 0,\r\n                        to: 0,\r\n                    },\r\n                    query: null,\r\n                    text: null,\r\n                    composing: false,\r\n                };\r\n                return state;\r\n            },\r\n            // Apply changes to the plugin state from a view transaction.\r\n            apply(transaction, prev, oldState, state) {\r\n                const { isEditable } = editor;\r\n                const { composing } = editor.view;\r\n                const { selection } = transaction;\r\n                const { empty, from } = selection;\r\n                const next = { ...prev };\r\n                next.composing = composing;\r\n                // We can only be suggesting if the view is editable, and:\r\n                //   * there is no selection, or\r\n                //   * a composition is active (see: https://github.com/ueberdosis/tiptap/issues/1449)\r\n                if (isEditable && (empty || editor.view.composing)) {\r\n                    // Reset active state if we just left the previous suggestion range\r\n                    if ((from < prev.range.from || from > prev.range.to) && !composing && !prev.composing) {\r\n                        next.active = false;\r\n                    }\r\n                    // Try to match against where our cursor currently is\r\n                    const match = findSuggestionMatch({\r\n                        char,\r\n                        allowSpaces,\r\n                        allowedPrefixes,\r\n                        startOfLine,\r\n                        $position: selection.$from,\r\n                    });\r\n                    const decorationId = `id_${Math.floor(Math.random() * 0xffffffff)}`;\r\n                    // If we found a match, update the current state to show it\r\n                    if (match && allow({ editor, state, range: match.range })) {\r\n                        next.active = true;\r\n                        next.decorationId = prev.decorationId ? prev.decorationId : decorationId;\r\n                        next.range = match.range;\r\n                        next.query = match.query;\r\n                        next.text = match.text;\r\n                    }\r\n                    else {\r\n                        next.active = false;\r\n                    }\r\n                }\r\n                else {\r\n                    next.active = false;\r\n                }\r\n                // Make sure to empty the range if suggestion is inactive\r\n                if (!next.active) {\r\n                    next.decorationId = null;\r\n                    next.range = { from: 0, to: 0 };\r\n                    next.query = null;\r\n                    next.text = null;\r\n                }\r\n                return next;\r\n            },\r\n        },\r\n        props: {\r\n            // Call the keydown hook if suggestion is active.\r\n            handleKeyDown(view, event) {\r\n                var _a;\r\n                const { active, range } = plugin.getState(view.state);\r\n                if (!active) {\r\n                    return false;\r\n                }\r\n                return ((_a = renderer === null || renderer === void 0 ? void 0 : renderer.onKeyDown) === null || _a === void 0 ? void 0 : _a.call(renderer, { view, event, range })) || false;\r\n            },\r\n            // Setup decorator on the currently active suggestion.\r\n            decorations(state) {\r\n                const { active, range, decorationId } = plugin.getState(state);\r\n                if (!active) {\r\n                    return null;\r\n                }\r\n                return DecorationSet.create(state.doc, [\r\n                    Decoration.inline(range.from, range.to, {\r\n                        nodeName: decorationTag,\r\n                        class: decorationClass,\r\n                        'data-decoration-id': decorationId,\r\n                    }),\r\n                ]);\r\n            },\r\n        },\r\n    });\r\n    return plugin;\r\n}\n\nexport { Suggestion, SuggestionPluginKey, Suggestion as default, findSuggestionMatch };\n//# sourceMappingURL=index.js.map\n","import { Node, mergeAttributes } from \"@tiptap/core\";\nimport { PluginKey } from \"prosemirror-state\";\nimport { Suggestion as ProseMirrorSuggestion } from \"@tiptap/suggestion\";\nimport { context_menu, context_menu_close } from \"../context_menu\";\nimport { focus_handler } from \"../focus-handler\";\nimport { BasePattern } from \"@patternslib/patternslib/src/core/basepattern\";\nimport dom from \"@patternslib/patternslib/src/core/dom\";\nimport events from \"@patternslib/patternslib/src/core/events\";\nimport utils from \"@patternslib/patternslib/src/core/utils\";\nimport tiptap_utils from \"../utils\";\n\nlet context_menu_instance;\n\nfunction pattern_suggestion(app, props) {\n    // Dynamic pattern for the suggestion context menu\n\n    class Pattern extends BasePattern {\n        static name = \"tiptap-suggestion\";\n        static trigger = \".tiptap-items\";\n\n        init() {\n            focus_handler(this.el);\n\n            this.active = this.items[0];\n\n            // Support selections via keyboard navigation.\n            events.add_event_listener(\n                this.el,\n                \"keydown\",\n                \"tiptap-suggestion-keydown\",\n                (e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n\n                    const items = this.items;\n                    const active = this.active;\n                    if (e.code === \"ArrowDown\") {\n                        // Select next or first.\n                        if (!active) {\n                            this.active = items[0];\n                        } else {\n                            let next = active ? items.indexOf(active) + 1 : 0;\n                            if (next >= items.length) {\n                                // circular selection mode, start with first.\n                                next = 0;\n                                // TODO: should we load the next batch?\n                            }\n                            this.active = items[next];\n                        }\n                    } else if (e.code === \"ArrowUp\") {\n                        // Select previous or last.\n                        if (!active) {\n                            this.active = items[0];\n                        } else {\n                            let prev = active ? items.indexOf(active) - 1 : 0;\n                            if (prev < 0) {\n                                // back to first\n                                prev = items.length - 1;\n                                // TODO: should we load the previous batch?\n                            }\n                            this.active = items[prev];\n                        }\n                    } else if (e.code === \"Enter\") {\n                        // Use selected to insert in text area.\n                        const value = active?.dataset?.tiptapValue;\n                        if (!value) {\n                            // nothing selected.\n                            return;\n                        }\n\n                        const el = active.querySelector(\"a\");\n                        this.command(el, value);\n                    }\n                }\n            );\n\n            // Select and insert to text area by clicking.\n            events.add_event_listener(\n                this.el,\n                \"click\",\n                \"tiptap-suggestion-click\",\n                (e) => {\n                    const el = e.target.closest(\"a\");\n                    const value = dom.acquire_attribute(el, \"data-tiptap-value\");\n                    if (!value) {\n                        // clicked anywhere, but not on a selection item\n                        return;\n                    }\n\n                    e.preventDefault();\n                    this.command(el, value);\n                }\n            );\n        }\n\n        command(el, value) {\n            const attributes = Object.fromEntries(\n                [...el.attributes].map((it) => [it.name, it.value])\n            );\n            props.command({\n                \"data-title\": value,\n                ...attributes,\n            });\n        }\n\n        get active() {\n            // Get the currently selected item.\n            return this.el.querySelector(\".tiptap-item.active\");\n        }\n\n        set active(el) {\n            if (!el) {\n                // No item available, e.g. no search results and thus not this.items.\n                return;\n            }\n            // Set an item to be selected.\n            this.active?.classList.remove(\"active\");\n            el.classList.add(\"active\");\n        }\n\n        get items() {\n            // Get all items.\n            return [...this.el.querySelectorAll(\".tiptap-item\")];\n        }\n    }\n\n    return Pattern;\n}\n\nexport const factory = ({ app, name, char, plural }) => {\n    return Node.create({\n        name: name,\n        content: \"inline*\",\n        group: \"inline\",\n        inline: true,\n        selectable: false,\n        atom: true,\n        isolating: true,\n\n        addOptions() {\n            return {\n                HTMLAttributes: {},\n                url: null,\n                renderLabel({ options, node }) {\n                    // Prefer text from data-title attribute to the node's text\n                    // content. The node's text content (e.g. from the\n                    // suggestion overlay) could include some other text or\n                    // markup not suitable for rendering the suggestion.\n                    // Replace any existing suggestion char from the text.\n                    const text = (\n                        node.attrs[\"data-title\"] ||\n                        node.content?.content?.[0]?.text ||\n                        \"\"\n                    ).replace(new RegExp(`^${options.suggestion.char}`), \"\");\n                    return `${options.suggestion.char}${text}`;\n                },\n                suggestion: {\n                    char: char,\n                    pluginKey: new PluginKey(name),\n                },\n            };\n        },\n\n        addAttributes() {\n            const attributes = {\n                \"class\": {},\n                \"contenteditable\": {},\n                \"href\": {},\n                \"target\": {},\n                \"title\": {},\n                \"data-id\": {},\n                \"data-title\": {},\n                // add a lot of patterns data attributes...\n                \"data-pat-inject\": {},\n                \"data-pat-forward\": {},\n                \"data-pat-modal\": {},\n                \"data-pat-switch\": {},\n                \"data-pat-toggle\": {},\n                \"data-pat-tooltip\": {},\n            };\n\n            // Needs to be always included. A default of \"\" makes sure it is.\n            attributes[`data-${this.name}`] = { default: \"\" };\n\n            for (const attr of tiptap_utils.accessibility_attributes) {\n                // Add a bunch of accessibility attributes\n                attributes[attr] = {};\n            }\n\n            return attributes;\n        },\n\n        parseHTML() {\n            return [\n                {\n                    tag: `a[data-${this.name}]`,\n                },\n            ];\n        },\n\n        renderHTML({ node, HTMLAttributes }) {\n            return [\n                \"a\",\n                mergeAttributes(this.options.HTMLAttributes, HTMLAttributes),\n                this.options.renderLabel({\n                    options: this.options,\n                    node,\n                }),\n            ];\n        },\n\n        renderText({ node }) {\n            return this.options.renderLabel({\n                options: this.options,\n                node,\n            });\n        },\n\n        addKeyboardShortcuts() {\n            return {\n                Enter: () => {\n                    if (context_menu_instance) {\n                        // While suggestion menu is open, do not add a line-break to the text.\n                        // Handle the ``Enter`` key as early as possible to prevent a line-break to happen.\n\n                        // Dispatch the event to the context menu pattern\n                        // while still keeping the focus in the textarea.\n                        context_menu_instance.tippy?.popper\n                            ?.querySelector(\".tiptap-items\")\n                            ?.dispatchEvent(\n                                new KeyboardEvent(\"keydown\", {\n                                    code: \"Enter\",\n                                })\n                            );\n\n                        return true;\n                    }\n                    // Normal case, do not prevent the Enter key to add a line break.\n                    return false;\n                },\n\n                Backspace: ({ editor }) =>\n                    editor.commands.command(({ tr, state }) => {\n                        let is_suggestion = false;\n                        const { selection } = state;\n                        const { empty, anchor } = selection;\n\n                        if (!empty) {\n                            return false;\n                        }\n\n                        state.doc.nodesBetween(anchor - 1, anchor, (node, pos) => {\n                            if (node.type.name === this.name) {\n                                is_suggestion = true;\n                                tr.insertText(\n                                    this.options.suggestion.char || \"\",\n                                    pos,\n                                    pos + node.nodeSize\n                                );\n\n                                return false;\n                            }\n                        });\n\n                        return is_suggestion;\n                    }),\n            };\n        },\n\n        addProseMirrorPlugins() {\n            // Suggestion command\n            this.options.suggestion.command = ({ editor, range, props }) => {\n                // Extend range until current cursor position.\n                range.to = editor.state.selection.$head.pos;\n                editor\n                    .chain()\n                    .focus()\n                    .insertContentAt(range, [\n                        {\n                            type: this.name,\n                            attrs: props,\n                        },\n                        {\n                            type: \"text\",\n                            text: \" \",\n                        },\n                    ])\n                    .run();\n            };\n\n            // Suggestion menu rendering\n            this.options.suggestion.render = () => {\n                let _debounced_context_menu;\n\n                const ctx_close = async () => {\n                    this.editor.off(\"selectionUpdate\", _debounced_context_menu);\n                    await context_menu_close({\n                        instance: context_menu_instance,\n                        pattern_name: \"tiptap-suggestion\",\n                    });\n                    context_menu_instance = null;\n                };\n\n                return {\n                    onStart: async (props) => {\n                        const _context_menu = async (\n                            { transaction } = { transaction: null } // optional destructuring\n                        ) => {\n                            // If the transaction parameter is given then this\n                            // is a ``selectionUpdate``.\n                            let url = this.options.url;\n\n                            // Now get the text and pass it to the backend to\n                            // query for the filter value.\n                            //\n                            // Get the text input between the suggestion\n                            // character and the cursor.\n                            // This is then used to filter items and submitted\n                            // as query string to the server.\n                            let from = props.range.from + 1; // start w/out suggestion character.\n                            let to = transaction\n                                ? transaction.curSelection.$head.pos\n                                : props.range.to;\n                            const text = this.editor.state.doc.textBetween(from, to, \"\"); // prettier-ignore\n\n                            // Add query string filter value.\n                            // The query string filter key must be already present on the URL.\n                            url = text ? url + text : url;\n\n                            const ctx_menu = await context_menu({\n                                url: url,\n                                editor: this.editor,\n                                instance: context_menu_instance,\n                                pattern: pattern_suggestion(app, props),\n                                extra_class: `tiptap-${plural || this.name}`, // plural form\n                            });\n\n                            return ctx_menu;\n                        };\n                        _debounced_context_menu = utils.debounce(async (transaction) => {\n                            context_menu_instance = await _context_menu(transaction);\n                        }, 200);\n\n                        // Immediately open the suggestion context menu.\n                        context_menu_instance = await _context_menu();\n\n                        // ... and reload it after text input after a short timeout.\n                        this.editor.on(\"selectionUpdate\", _debounced_context_menu);\n                    },\n                    onKeyDown: (props) => {\n                        if (!context_menu_instance) {\n                            //No context menu open, return.\n                            return;\n                        }\n\n                        if (\n                            props.event.key === \"ArrowDown\" ||\n                            props.event.key === \"ArrowUp\" ||\n                            props.event.key === \"Enter\"\n                        ) {\n                            props.event.preventDefault();\n                            props.event.stopPropagation();\n                            const ctx = document.querySelector(\".tiptap-items\");\n                            if (!ctx) {\n                                return;\n                            }\n\n                            // Dispatch the event to the context menu pattern\n                            // while still keeping the focus in the textarea.\n                            ctx.dispatchEvent(\n                                new KeyboardEvent(\"keydown\", {\n                                    code: props.event.key,\n                                })\n                            );\n                        }\n                    },\n                    onExit: () => {\n                        ctx_close();\n                    },\n                };\n            };\n\n            // Suggestion allow\n            this.options.suggestion.allow = ({ state, range }) => {\n                const $from = state.doc.resolve(range.from);\n                const type = state.schema.nodes[this.name];\n                const allow = !!$from.parent.type.contentMatch.matchType(type);\n\n                return allow;\n            };\n\n            return [\n                ProseMirrorSuggestion({\n                    editor: this.editor,\n                    ...this.options.suggestion,\n                }),\n            ];\n        },\n    });\n};\n","import events from \"@patternslib/patternslib/src/core/events\";\nimport utils from \"@patternslib/patternslib/src/core/utils\";\n\nexport const TARGETS = [];\n\nexport function focus_handler(el) {\n    // make element focusable\n    // See: https://javascript.info/focus-blur\n    el.setAttribute(\"tabindex\", \"-1\"); // not user-selectable but programmatically focusable.\n    events.add_event_listener(\n        el,\n        \"focus\",\n        \"tiptap-focusin\",\n        async () => {\n            utils.timeout(1); // short timeout to ensure focus class is set even if tiptap_blur_handler is called concurrently.\n            TARGETS.map((it) => it?.classList.add(\"tiptap-focus\"));\n        },\n        true\n    );\n    events.add_event_listener(\n        el,\n        \"blur\",\n        \"tiptap-focusout\",\n        () => {\n            TARGETS.map((it) => it?.classList.remove(\"tiptap-focus\"));\n        },\n        true\n    );\n}\n","export const add_search_params = (url, params = {}) => {\n    // See: https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/URLSearchParams#examples\n    const url_obj = new URL(url, window.location.href);\n    return `${url_obj.origin}${url_obj.pathname}?${new URLSearchParams([\n        ...Array.from(url_obj.searchParams.entries()),\n        ...Object.entries(params),\n    ]).toString()}`;\n};\n\n// Export a list of WAI attributes.\nexport const accessibility_attributes = [\n    \"aria-activedescendant\",\n    \"aria-atomic\",\n    \"aria-autocomplete\",\n    \"aria-busy\",\n    \"aria-checked\",\n    \"aria-controls\",\n    \"aria-describedby\",\n    \"aria-disabled\",\n    \"aria-dropeffect\",\n    \"aria-expanded\",\n    \"aria-flowto\",\n    \"aria-grabbed\",\n    \"aria-haspopup\",\n    \"aria-hidden\",\n    \"aria-invalid\",\n    \"aria-label\",\n    \"aria-labelledby\",\n    \"aria-level\",\n    \"aria-live\",\n    \"aria-multiline\",\n    \"aria-multiselectable\",\n    \"aria-orientation\",\n    \"aria-owns\",\n    \"aria-posinset\",\n    \"aria-pressed\",\n    \"aria-readonly\",\n    \"aria-relevant\",\n    \"aria-required\",\n    \"aria-selected\",\n    \"aria-setsize\",\n    \"aria-sort\",\n    \"aria-valuemax\",\n    \"aria-valuemin\",\n    \"aria-valuenow\",\n    \"aria-valuetext\",\n    \"role\",\n];\n\n/**\n * Test, if a given string is a absolute or relative URL.\n *\n * @param {string} value - The URL to test.\n * @returns {boolean} True, if the value is a absolute or relative URL.\n */\nexport const is_url = (value) => {\n    // Search for relative or absolute URLs (e.g. `/`, `./`, `../`) or for\n    // any URL with a protocol (e.g. `http://`, `https://`, `mailto:`).\n    const re_url = /(^\\.?\\.?\\/|^[^\\.]+:)/;\n    return re_url.test(value);\n};\n\n/**\n * Test, if a given string is a valid e-mail address.\n *\n * @param {string} value - The e-mail to test.\n * @returns {boolean} True, if the value is a valid e-mail.\n */\nexport const is_mail = (value) => {\n    const re_mail = /[^@\\s]+@[^@\\s]+\\.[^@\\s]+/;\n    return re_mail.test(value);\n};\n\nexport default {\n    add_search_params: add_search_params,\n    accessibility_attributes: accessibility_attributes,\n    is_url: is_url,\n    is_mail: is_mail,\n};\n"],"names":["PREV_NODE","async","context_menu","url","editor","instance","pattern","extra_class","prev_node","cur_node","state","doc","nodeAt","selection","from","tippy","popperInstance","context_menu_close","pattern_name","name","get_content","registry","editor_element","options","element","patTooltip","events","reference_position","posToDOMRect","view","to","setProps","getReferenceClientRect","document","e","target","dom","includes","popper","key","show","hide","destroy","SuggestionPluginKey","Suggestion","pluginKey","char","allowSpaces","allowedPrefixes","startOfLine","decorationTag","decorationClass","command","items","render","allow","props","renderer","plugin","update","prevState","_a","_b","_c","_d","_e","_f","_g","prev","this","getState","next","moved","active","range","started","stopped","handleStart","handleChange","query","handleExit","decorationNode","querySelector","decorationId","text","commandProps","clientRect","currentDecorationNode","getBoundingClientRect","onBeforeStart","call","onBeforeUpdate","onExit","onUpdate","onStart","init","composing","apply","transaction","oldState","isEditable","empty","match","config","$position","escapedChar","escapeForRegEx","suffix","RegExp","prefix","regexp","nodeBefore","isText","textFrom","pos","length","Array","matchAll","pop","undefined","input","index","matchPrefix","slice","Math","max","matchPrefixIsAllowed","join","test","findSuggestionMatch","$from","floor","random","handleKeyDown","event","onKeyDown","decorations","nodeName","class","context_menu_instance","pattern_suggestion","app","Pattern","BasePattern","focus_handler","el","preventDefault","stopPropagation","code","indexOf","value","dataset","tiptapValue","closest","attributes","Object","fromEntries","map","it","classList","remove","add","querySelectorAll","factory","plural","Node","content","group","inline","selectable","atom","isolating","addOptions","HTMLAttributes","renderLabel","node","attrs","replace","suggestion","PluginKey","addAttributes","default","attr","tiptap_utils","parseHTML","tag","renderHTML","mergeAttributes","renderText","addKeyboardShortcuts","Enter","dispatchEvent","KeyboardEvent","Backspace","commands","tr","is_suggestion","anchor","nodesBetween","type","insertText","nodeSize","addProseMirrorPlugins","$head","chain","focus","insertContentAt","run","_debounced_context_menu","ctx_close","off","_context_menu","curSelection","textBetween","ctx_menu","utils","on","ctx","resolve","schema","nodes","parent","contentMatch","matchType","ProseMirrorSuggestion","TARGETS","setAttribute","add_search_params","params","url_obj","URL","window","location","href","origin","pathname","URLSearchParams","searchParams","entries","toString","accessibility_attributes","is_url","is_mail"],"sourceRoot":""}
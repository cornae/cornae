{"version":3,"file":"chunks/87441.bce960ee82ed34d7baa0.min.js","mappings":"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","sources":["webpack://@patternslib/patternslib/./node_modules/marked/lib/marked.esm.js"],"sourcesContent":["/**\n * marked v4.2.12 - a markdown parser\n * Copyright (c) 2011-2023, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\nfunction getDefaults() {\n  return {\n    async: false,\n    baseUrl: null,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: null,\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartypants: false,\n    tokenizer: null,\n    walkTokens: null,\n    xhtml: false\n  };\n}\n\nlet defaults = getDefaults();\n\nfunction changeDefaults(newDefaults) {\n  defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n\n/**\n * @param {string} html\n */\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nconst caret = /(^|[^\\[])\\^/g;\n\n/**\n * @param {string | RegExp} regex\n * @param {string} opt\n */\nfunction edit(regex, opt) {\n  regex = typeof regex === 'string' ? regex : regex.source;\n  opt = opt || '';\n  const obj = {\n    replace: (name, val) => {\n      val = val.source || val;\n      val = val.replace(caret, '$1');\n      regex = regex.replace(name, val);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\n\nconst nonWordAndColonTest = /[^\\w:]/g;\nconst originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\n/**\n * @param {boolean} sanitize\n * @param {string} base\n * @param {string} href\n */\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    let prot;\n    try {\n      prot = decodeURIComponent(unescape(href))\n        .replace(nonWordAndColonTest, '')\n        .toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\n\nconst baseUrls = {};\nconst justDomain = /^[^:]+:\\/*[^/]*$/;\nconst protocol = /^([^:]+:)[\\s\\S]*$/;\nconst domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\n\n/**\n * @param {string} base\n * @param {string} href\n */\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (justDomain.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n  const relativeBase = base.indexOf(':') === -1;\n\n  if (href.substring(0, 2) === '//') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(protocol, '$1') + href;\n  } else if (href.charAt(0) === '/') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(domain, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\n\nconst noopTest = { exec: function noopTest() {} };\n\nfunction merge(obj) {\n  let i = 1,\n    target,\n    key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n      let escaped = false,\n        curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(/ \\|/);\n  let i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) { cells.shift(); }\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) { cells.pop(); }\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param {string} str\n * @param {string} c\n * @param {boolean} invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.slice(0, l - suffLen);\n}\n\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  const l = str.length;\n  let level = 0,\n    i = 0;\n  for (; i < l; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\nfunction checkSanitizeDeprecation(opt) {\n  if (opt && opt.sanitize && !opt.silent) {\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n  }\n}\n\n// copied from https://stackoverflow.com/a/5450113/806777\n/**\n * @param {string} pattern\n * @param {number} count\n */\nfunction repeatString(pattern, count) {\n  if (count < 1) {\n    return '';\n  }\n  let result = '';\n  while (count > 1) {\n    if (count & 1) {\n      result += pattern;\n    }\n    count >>= 1;\n    pattern += pattern;\n  }\n  return result + pattern;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n  const href = link.href;\n  const title = link.title ? escape(link.title) : null;\n  const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n\n  if (cap[0].charAt(0) !== '!') {\n    lexer.state.inLink = true;\n    const token = {\n      type: 'link',\n      raw,\n      href,\n      title,\n      text,\n      tokens: lexer.inlineTokens(text)\n    };\n    lexer.state.inLink = false;\n    return token;\n  }\n  return {\n    type: 'image',\n    raw,\n    href,\n    title,\n    text: escape(text)\n  };\n}\n\nfunction indentCodeCompensation(raw, text) {\n  const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n\n  return text\n    .split('\\n')\n    .map(node => {\n      const matchIndentInNode = node.match(/^\\s+/);\n      if (matchIndentInNode === null) {\n        return node;\n      }\n\n      const [indentInNode] = matchIndentInNode;\n\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n\n      return node;\n    })\n    .join('\\n');\n}\n\n/**\n * Tokenizer\n */\nclass Tokenizer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  space(src) {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0]\n      };\n    }\n  }\n\n  code(src) {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ {1,4}/gm, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic\n          ? rtrim(text, '\\n')\n          : text\n      };\n    }\n  }\n\n  fences(src) {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '');\n\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, '$1') : cap[2],\n        text\n      };\n    }\n  }\n\n  heading(src) {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n\n      // remove trailing #s\n      if (/#$/.test(text)) {\n        const trimmed = rtrim(text, '#');\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || / $/.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  hr(src) {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: cap[0]\n      };\n    }\n  }\n\n  blockquote(src) {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ *>[ \\t]?/gm, '');\n      const top = this.lexer.state.top;\n      this.lexer.state.top = true;\n      const tokens = this.lexer.blockTokens(text);\n      this.lexer.state.top = top;\n      return {\n        type: 'blockquote',\n        raw: cap[0],\n        tokens,\n        text\n      };\n    }\n  }\n\n  list(src) {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine,\n        line, nextLine, rawLine, itemContents, endEarly;\n\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n\n      const list = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: []\n      };\n\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      }\n\n      // Get next list item\n      const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n\n      // Check if current bullet point can start a new List Item\n      while (src) {\n        endEarly = false;\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n\n        line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n        nextLine = src.split('\\n', 1)[0];\n\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimLeft();\n        } else {\n          indent = cap[2].search(/[^ ]/); // Find first non-space char\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        blankLine = false;\n\n        if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n          const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n          const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n          const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n\n          // Check if following lines should be included in List Item\n          while (src) {\n            rawLine = src.split('\\n', 1)[0];\n            nextLine = rawLine;\n\n            // Re-align to follow commonmark nesting rules\n            if (this.options.pedantic) {\n              nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n            }\n\n            // End list item if found code fences\n            if (fencesBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new heading\n            if (headingBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new bullet\n            if (nextBulletRegex.test(nextLine)) {\n              break;\n            }\n\n            // Horizontal rule found\n            if (hrRegex.test(src)) {\n              break;\n            }\n\n            if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n              itemContents += '\\n' + nextLine.slice(indent);\n            } else {\n              // not enough indentation\n              if (blankLine) {\n                break;\n              }\n\n              // paragraph continuation unless last line was a different block level element\n              if (line.search(/[^ ]/) >= 4) { // indented code block\n                break;\n              }\n              if (fencesBeginRegex.test(line)) {\n                break;\n              }\n              if (headingBeginRegex.test(line)) {\n                break;\n              }\n              if (hrRegex.test(line)) {\n                break;\n              }\n\n              itemContents += '\\n' + nextLine;\n            }\n\n            if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n            line = nextLine.slice(indent);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (/\\n *\\n *$/.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n\n        // Check for task list items\n        if (this.options.gfm) {\n          istask = /^\\[[ xX]\\] /.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents\n        });\n\n        list.raw += raw;\n      }\n\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n      list.items[list.items.length - 1].raw = raw.trimRight();\n      list.items[list.items.length - 1].text = itemContents.trimRight();\n      list.raw = list.raw.trimRight();\n\n      const l = list.items.length;\n\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\n      for (i = 0; i < l; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n\n        if (!list.loose) {\n          // Check if list should be loose\n          const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n\n          list.loose = hasMultipleLineBreaks;\n        }\n      }\n\n      // Set all items to loose if list is loose\n      if (list.loose) {\n        for (i = 0; i < l; i++) {\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src) {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token = {\n        type: 'html',\n        raw: cap[0],\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      };\n      if (this.options.sanitize) {\n        const text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);\n        token.type = 'paragraph';\n        token.text = text;\n        token.tokens = this.lexer.inline(text);\n      }\n      return token;\n    }\n  }\n\n  def(src) {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline._escapes, '$1') : '';\n      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, '$1') : cap[3];\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href,\n        title\n      };\n    }\n  }\n\n  table(src) {\n    const cap = this.rules.block.table.exec(src);\n    if (cap) {\n      const item = {\n        type: 'table',\n        header: splitCells(cap[1]).map(c => { return { text: c }; }),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        item.raw = cap[0];\n\n        let l = item.align.length;\n        let i, j, k, row;\n        for (i = 0; i < l; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        l = item.rows.length;\n        for (i = 0; i < l; i++) {\n          item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => { return { text: c }; });\n        }\n\n        // parse child tokens inside headers and cells\n\n        // header child tokens\n        l = item.header.length;\n        for (j = 0; j < l; j++) {\n          item.header[j].tokens = this.lexer.inline(item.header[j].text);\n        }\n\n        // cell child tokens\n        l = item.rows.length;\n        for (j = 0; j < l; j++) {\n          row = item.rows[j];\n          for (k = 0; k < row.length; k++) {\n            row[k].tokens = this.lexer.inline(row[k].text);\n          }\n        }\n\n        return item;\n      }\n    }\n  }\n\n  lheading(src) {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: this.lexer.inline(cap[1])\n      };\n    }\n  }\n\n  paragraph(src) {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n        ? cap[1].slice(0, -1)\n        : cap[1];\n      return {\n        type: 'paragraph',\n        raw: cap[0],\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  text(src) {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: this.lexer.inline(cap[0])\n      };\n    }\n  }\n\n  escape(src) {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: escape(cap[1])\n      };\n    }\n  }\n\n  tag(src) {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: this.options.sanitize\n          ? 'text'\n          : 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        text: this.options.sanitize\n          ? (this.options.sanitizer\n            ? this.options.sanitizer(cap[0])\n            : escape(cap[0]))\n          : cap[0]\n      };\n    }\n  }\n\n  link(src) {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!(/>$/.test(trimmedUrl))) {\n          return;\n        }\n\n        // ending angle bracket cannot be escaped\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n      let href = cap[2];\n      let title = '';\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n      if (/^</.test(href)) {\n        if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n        title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n      }, cap[0], this.lexer);\n    }\n  }\n\n  reflink(src, links) {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src))\n        || (cap = this.rules.inline.nolink.exec(src))) {\n      let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = links[link.toLowerCase()];\n      if (!link) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer);\n    }\n  }\n\n  emStrong(src, maskedSrc, prevChar = '') {\n    let match = this.rules.inline.emStrong.lDelim.exec(src);\n    if (!match) return;\n\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n    if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u)) return;\n\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || (nextChar && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar)))) {\n      const lLength = match[0].length - 1;\n      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n      endReg.lastIndex = 0;\n\n      // Clip maskedSrc to same section of string as src (move to lexer?)\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = rDelim.length;\n\n        if (match[3] || match[4]) { // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) { // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n        // Remove extra characters. *a*** -> *a*\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n\n        const raw = src.slice(0, lLength + match.index + (match[0].length - rDelim.length) + rLength);\n\n        // Create `em` if smallest delimiter has odd char count. *a***\n        if (Math.min(lLength, rLength) % 2) {\n          const text = raw.slice(1, -1);\n          return {\n            type: 'em',\n            raw,\n            text,\n            tokens: this.lexer.inlineTokens(text)\n          };\n        }\n\n        // Create 'strong' if smallest delimiter has even char count. **a***\n        const text = raw.slice(2, -2);\n        return {\n          type: 'strong',\n          raw,\n          text,\n          tokens: this.lexer.inlineTokens(text)\n        };\n      }\n    }\n  }\n\n  codespan(src) {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(/\\n/g, ' ');\n      const hasNonSpaceChars = /[^ ]/.test(text);\n      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      text = escape(text, true);\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n\n  br(src) {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0]\n      };\n    }\n  }\n\n  del(src) {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2])\n      };\n    }\n  }\n\n  autolink(src, mangle) {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  url(src, mangle) {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + cap[0];\n        } else {\n          href = cap[0];\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  inlineText(src, smartypants) {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      let text;\n      if (this.lexer.state.inRawBlock) {\n        text = this.options.sanitize ? (this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0])) : cap[0];\n      } else {\n        text = escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n      }\n      return {\n        type: 'text',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n}\n\n/**\n * Block-Level Grammar\n */\nconst block = {\n  newline: /^(?: *(?:\\n|$))+/,\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*\\n)|~{3,})([^\\n]*)\\n(?:|([\\s\\S]*?)\\n)(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n  html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')',\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noopTest,\n  lheading: /^((?:.|\\n(?!\\n))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\n\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n  .replace('label', block._label)\n  .replace('title', block._title)\n  .getRegex();\n\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */)\n  .replace('bull', block.bullet)\n  .getRegex();\n\nblock.list = edit(block.list)\n  .replace(/bull/g, block.bullet)\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\n  .getRegex();\n\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n  + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i')\n  .replace('comment', block._comment)\n  .replace('tag', block._tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nblock.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('|table', '')\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.blockquote = edit(block.blockquote)\n  .replace('paragraph', block.paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\n    + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n});\n\nblock.gfm.table = edit(block.gfm.table)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('blockquote', ' {0,3}>')\n  .replace('code', ' {4}[^\\\\n]')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.gfm.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('table', block.gfm.table) // interrupt paragraphs with table\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nblock.pedantic = merge({}, block.normal, {\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', block._comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest, // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(block.normal._paragraph)\n    .replace('hr', block.hr)\n    .replace('heading', ' *#{1,6} *[^\\n]')\n    .replace('lheading', block.lheading)\n    .replace('blockquote', ' {0,3}>')\n    .replace('|fences', '')\n    .replace('|list', '')\n    .replace('|html', '')\n    .getRegex()\n});\n\n/**\n * Inline-Level Grammar\n */\nconst inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest,\n  tag: '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>', // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n  reflinkSearch: 'reflink|nolink(?!\\\\()',\n  emStrong: {\n    lDelim: /^(?:\\*+(?:([punct_])|[^\\s*]))|^_+(?:([punct*])|([^\\s_]))/,\n    //        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n    //          () Skip orphan inside strong                                      () Consume to delim     (1) #***                (2) a***#, a***                             (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a\n    rDelimAst: /^(?:[^_*\\\\]|\\\\.)*?\\_\\_(?:[^_*\\\\]|\\\\.)*?\\*(?:[^_*\\\\]|\\\\.)*?(?=\\_\\_)|(?:[^*\\\\]|\\\\.)+(?=[^*])|[punct_](\\*+)(?=[\\s]|$)|(?:[^punct*_\\s\\\\]|\\\\.)(\\*+)(?=[punct_\\s]|$)|[punct_\\s](\\*+)(?=[^punct*_\\s])|[\\s](\\*+)(?=[punct_])|[punct_](\\*+)(?=[punct_])|(?:[^punct*_\\s\\\\]|\\\\.)(\\*+)(?=[^punct*_\\s])/,\n    rDelimUnd: /^(?:[^_*\\\\]|\\\\.)*?\\*\\*(?:[^_*\\\\]|\\\\.)*?\\_(?:[^_*\\\\]|\\\\.)*?(?=\\*\\*)|(?:[^_\\\\]|\\\\.)+(?=[^_])|[punct*](\\_+)(?=[\\s]|$)|(?:[^punct*_\\s\\\\]|\\\\.)(\\_+)(?=[punct*\\s]|$)|[punct*\\s](\\_+)(?=[^punct*_\\s])|[\\s](\\_+)(?=[punct*])|[punct*](\\_+)(?=[punct*])/ // ^- Not allowed for _\n  },\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest,\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  punctuation: /^([\\spunctuation])/\n};\n\n// list of punctuation marks from CommonMark spec\n// without * and _ to handle the different emphasis markers * and _\ninline._punctuation = '!\"#$%&\\'()+\\\\-.,/:;<=>?@\\\\[\\\\]`^{|}~';\ninline.punctuation = edit(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex();\n\n// sequences em should skip over [title](link), `code`, <html>\ninline.blockSkip = /\\[[^\\]]*?\\]\\([^\\)]*?\\)|`[^`]*?`|<[^>]*?>/g;\n// lookbehind is not available on Safari as of version 16\n// inline.escapedEmSt = /(?<=(?:^|[^\\\\)(?:\\\\[^])*)\\\\[*_]/g;\ninline.escapedEmSt = /(?:^|[^\\\\])(?:\\\\\\\\)*\\\\[*_]/g;\n\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\n\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim)\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'g')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'g')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n  .replace('scheme', inline._scheme)\n  .replace('email', inline._email)\n  .getRegex();\n\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n\ninline.tag = edit(inline.tag)\n  .replace('comment', inline._comment)\n  .replace('attribute', inline._attribute)\n  .getRegex();\n\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n\ninline.link = edit(inline.link)\n  .replace('label', inline._label)\n  .replace('href', inline._href)\n  .replace('title', inline._title)\n  .getRegex();\n\ninline.reflink = edit(inline.reflink)\n  .replace('label', inline._label)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.nolink = edit(inline.nolink)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g')\n  .replace('reflink', inline.reflink)\n  .replace('nolink', inline.nolink)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', inline._label)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', inline._label)\n    .getRegex()\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n});\n\ninline.gfm.url = edit(inline.gfm.url, 'i')\n  .replace('email', inline.gfm._extended_email)\n  .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text)\n    .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n    .replace(/\\{2,\\}/g, '*')\n    .getRegex()\n});\n\n/**\n * smartypants text replacement\n * @param {string} text\n */\nfunction smartypants(text) {\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n}\n\n/**\n * mangle email addresses\n * @param {string} text\n */\nfunction mangle(text) {\n  let out = '',\n    i,\n    ch;\n\n  const l = text.length;\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n}\n\n/**\n * Block Lexer\n */\nclass Lexer {\n  constructor(options) {\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || defaults;\n    this.options.tokenizer = this.options.tokenizer || new Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n\n    const rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline\n    };\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.inlineTokens(src);\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src) {\n    src = src\n      .replace(/\\r\\n|\\r/g, '\\n');\n\n    this.blockTokens(src, this.tokens);\n\n    let next;\n    while (next = this.inlineQueue.shift()) {\n      this.inlineTokens(next.src, next.tokens);\n    }\n\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src, tokens = []) {\n    if (this.options.pedantic) {\n      src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n    } else {\n      src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n        return leading + '    '.repeat(tabs.length);\n      });\n    }\n\n    let token, lastToken, cutSrc, lastParagraphClipped;\n\n    while (src) {\n      if (this.options.extensions\n        && this.options.extensions.block\n        && this.options.extensions.block.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.length === 1 && tokens.length > 0) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unecessary paragraph tags\n          tokens[tokens.length - 1].raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        // An indented code block cannot interrupt a paragraph.\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        lastToken = tokens[tokens.length - 1];\n        if (lastParagraphClipped && lastToken.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = (cutSrc.length !== src.length);\n        src = src.substring(token.raw.length);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src, tokens = []) {\n    this.inlineQueue.push({ src, tokens });\n    return tokens;\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src, tokens = []) {\n    let token, lastToken, cutSrc;\n\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src;\n    let match;\n    let keepPrevChar, prevChar;\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n\n    // Mask out escaped em & strong delimiters\n    while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index + match[0].length - 2) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);\n      this.tokenizer.rules.inline.escapedEmSt.lastIndex--;\n    }\n\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n      keepPrevChar = false;\n\n      // extensions\n      if (this.options.extensions\n        && this.options.extensions.inline\n        && this.options.extensions.inline.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // em & strong\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src, mangle)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n}\n\n/**\n * Renderer\n */\nclass Renderer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  code(code, infostring, escaped) {\n    const lang = (infostring || '').match(/\\S*/)[0];\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang);\n      if (out != null && out !== code) {\n        escaped = true;\n        code = out;\n      }\n    }\n\n    code = code.replace(/\\n$/, '') + '\\n';\n\n    if (!lang) {\n      return '<pre><code>'\n        + (escaped ? code : escape(code, true))\n        + '</code></pre>\\n';\n    }\n\n    return '<pre><code class=\"'\n      + this.options.langPrefix\n      + escape(lang)\n      + '\">'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>\\n';\n  }\n\n  /**\n   * @param {string} quote\n   */\n  blockquote(quote) {\n    return `<blockquote>\\n${quote}</blockquote>\\n`;\n  }\n\n  html(html) {\n    return html;\n  }\n\n  /**\n   * @param {string} text\n   * @param {string} level\n   * @param {string} raw\n   * @param {any} slugger\n   */\n  heading(text, level, raw, slugger) {\n    if (this.options.headerIds) {\n      const id = this.options.headerPrefix + slugger.slug(raw);\n      return `<h${level} id=\"${id}\">${text}</h${level}>\\n`;\n    }\n\n    // ignore IDs\n    return `<h${level}>${text}</h${level}>\\n`;\n  }\n\n  hr() {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n  }\n\n  list(body, ordered, start) {\n    const type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n  }\n\n  /**\n   * @param {string} text\n   */\n  listitem(text) {\n    return `<li>${text}</li>\\n`;\n  }\n\n  checkbox(checked) {\n    return '<input '\n      + (checked ? 'checked=\"\" ' : '')\n      + 'disabled=\"\" type=\"checkbox\"'\n      + (this.options.xhtml ? ' /' : '')\n      + '> ';\n  }\n\n  /**\n   * @param {string} text\n   */\n  paragraph(text) {\n    return `<p>${text}</p>\\n`;\n  }\n\n  /**\n   * @param {string} header\n   * @param {string} body\n   */\n  table(header, body) {\n    if (body) body = `<tbody>${body}</tbody>`;\n\n    return '<table>\\n'\n      + '<thead>\\n'\n      + header\n      + '</thead>\\n'\n      + body\n      + '</table>\\n';\n  }\n\n  /**\n   * @param {string} content\n   */\n  tablerow(content) {\n    return `<tr>\\n${content}</tr>\\n`;\n  }\n\n  tablecell(content, flags) {\n    const type = flags.header ? 'th' : 'td';\n    const tag = flags.align\n      ? `<${type} align=\"${flags.align}\">`\n      : `<${type}>`;\n    return tag + content + `</${type}>\\n`;\n  }\n\n  /**\n   * span level renderer\n   * @param {string} text\n   */\n  strong(text) {\n    return `<strong>${text}</strong>`;\n  }\n\n  /**\n   * @param {string} text\n   */\n  em(text) {\n    return `<em>${text}</em>`;\n  }\n\n  /**\n   * @param {string} text\n   */\n  codespan(text) {\n    return `<code>${text}</code>`;\n  }\n\n  br() {\n    return this.options.xhtml ? '<br/>' : '<br>';\n  }\n\n  /**\n   * @param {string} text\n   */\n  del(text) {\n    return `<del>${text}</del>`;\n  }\n\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n  link(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n    let out = '<a href=\"' + href + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out;\n  }\n\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n  image(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n    if (title) {\n      out += ` title=\"${title}\"`;\n    }\n    out += this.options.xhtml ? '/>' : '>';\n    return out;\n  }\n\n  text(text) {\n    return text;\n  }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass TextRenderer {\n  // no need for block level renderers\n  strong(text) {\n    return text;\n  }\n\n  em(text) {\n    return text;\n  }\n\n  codespan(text) {\n    return text;\n  }\n\n  del(text) {\n    return text;\n  }\n\n  html(text) {\n    return text;\n  }\n\n  text(text) {\n    return text;\n  }\n\n  link(href, title, text) {\n    return '' + text;\n  }\n\n  image(href, title, text) {\n    return '' + text;\n  }\n\n  br() {\n    return '';\n  }\n}\n\n/**\n * Slugger generates header id\n */\nclass Slugger {\n  constructor() {\n    this.seen = {};\n  }\n\n  /**\n   * @param {string} value\n   */\n  serialize(value) {\n    return value\n      .toLowerCase()\n      .trim()\n      // remove html tags\n      .replace(/<[!\\/a-z].*?>/ig, '')\n      // remove unwanted chars\n      .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '')\n      .replace(/\\s/g, '-');\n  }\n\n  /**\n   * Finds the next safe (unique) slug to use\n   * @param {string} originalSlug\n   * @param {boolean} isDryRun\n   */\n  getNextSafeSlug(originalSlug, isDryRun) {\n    let slug = originalSlug;\n    let occurenceAccumulator = 0;\n    if (this.seen.hasOwnProperty(slug)) {\n      occurenceAccumulator = this.seen[originalSlug];\n      do {\n        occurenceAccumulator++;\n        slug = originalSlug + '-' + occurenceAccumulator;\n      } while (this.seen.hasOwnProperty(slug));\n    }\n    if (!isDryRun) {\n      this.seen[originalSlug] = occurenceAccumulator;\n      this.seen[slug] = 0;\n    }\n    return slug;\n  }\n\n  /**\n   * Convert string to unique id\n   * @param {object} [options]\n   * @param {boolean} [options.dryrun] Generates the next unique slug without\n   * updating the internal accumulator.\n   */\n  slug(value, options = {}) {\n    const slug = this.serialize(value);\n    return this.getNextSafeSlug(slug, options.dryrun);\n  }\n}\n\n/**\n * Parsing & Compiling\n */\nclass Parser {\n  constructor(options) {\n    this.options = options || defaults;\n    this.options.renderer = this.options.renderer || new Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new TextRenderer();\n    this.slugger = new Slugger();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parseInline(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens, top = true) {\n    let out = '',\n      i,\n      j,\n      k,\n      l2,\n      l3,\n      row,\n      cell,\n      header,\n      body,\n      token,\n      ordered,\n      start,\n      loose,\n      itemBody,\n      item,\n      checked,\n      task,\n      checkbox,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'space': {\n          continue;\n        }\n        case 'hr': {\n          out += this.renderer.hr();\n          continue;\n        }\n        case 'heading': {\n          out += this.renderer.heading(\n            this.parseInline(token.tokens),\n            token.depth,\n            unescape(this.parseInline(token.tokens, this.textRenderer)),\n            this.slugger);\n          continue;\n        }\n        case 'code': {\n          out += this.renderer.code(token.text,\n            token.lang,\n            token.escaped);\n          continue;\n        }\n        case 'table': {\n          header = '';\n\n          // header\n          cell = '';\n          l2 = token.header.length;\n          for (j = 0; j < l2; j++) {\n            cell += this.renderer.tablecell(\n              this.parseInline(token.header[j].tokens),\n              { header: true, align: token.align[j] }\n            );\n          }\n          header += this.renderer.tablerow(cell);\n\n          body = '';\n          l2 = token.rows.length;\n          for (j = 0; j < l2; j++) {\n            row = token.rows[j];\n\n            cell = '';\n            l3 = row.length;\n            for (k = 0; k < l3; k++) {\n              cell += this.renderer.tablecell(\n                this.parseInline(row[k].tokens),\n                { header: false, align: token.align[k] }\n              );\n            }\n\n            body += this.renderer.tablerow(cell);\n          }\n          out += this.renderer.table(header, body);\n          continue;\n        }\n        case 'blockquote': {\n          body = this.parse(token.tokens);\n          out += this.renderer.blockquote(body);\n          continue;\n        }\n        case 'list': {\n          ordered = token.ordered;\n          start = token.start;\n          loose = token.loose;\n          l2 = token.items.length;\n\n          body = '';\n          for (j = 0; j < l2; j++) {\n            item = token.items[j];\n            checked = item.checked;\n            task = item.task;\n\n            itemBody = '';\n            if (item.task) {\n              checkbox = this.renderer.checkbox(checked);\n              if (loose) {\n                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                  item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                    item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                  }\n                } else {\n                  item.tokens.unshift({\n                    type: 'text',\n                    text: checkbox\n                  });\n                }\n              } else {\n                itemBody += checkbox;\n              }\n            }\n\n            itemBody += this.parse(item.tokens, loose);\n            body += this.renderer.listitem(itemBody, task, checked);\n          }\n\n          out += this.renderer.list(body, ordered, start);\n          continue;\n        }\n        case 'html': {\n          // TODO parse inline content if parameter markdown=1\n          out += this.renderer.html(token.text);\n          continue;\n        }\n        case 'paragraph': {\n          out += this.renderer.paragraph(this.parseInline(token.tokens));\n          continue;\n        }\n        case 'text': {\n          body = token.tokens ? this.parseInline(token.tokens) : token.text;\n          while (i + 1 < l && tokens[i + 1].type === 'text') {\n            token = tokens[++i];\n            body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n          }\n          out += top ? this.renderer.paragraph(body) : body;\n          continue;\n        }\n\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens, renderer) {\n    renderer = renderer || this.renderer;\n    let out = '',\n      i,\n      token,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'escape': {\n          out += renderer.text(token.text);\n          break;\n        }\n        case 'html': {\n          out += renderer.html(token.text);\n          break;\n        }\n        case 'link': {\n          out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'image': {\n          out += renderer.image(token.href, token.title, token.text);\n          break;\n        }\n        case 'strong': {\n          out += renderer.strong(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'em': {\n          out += renderer.em(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'codespan': {\n          out += renderer.codespan(token.text);\n          break;\n        }\n        case 'br': {\n          out += renderer.br();\n          break;\n        }\n        case 'del': {\n          out += renderer.del(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'text': {\n          out += renderer.text(token.text);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out;\n  }\n}\n\n/**\n * Marked\n */\nfunction marked(src, opt, callback) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  if (typeof opt === 'function') {\n    callback = opt;\n    opt = null;\n  }\n\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n\n  if (callback) {\n    const highlight = opt.highlight;\n    let tokens;\n\n    try {\n      tokens = Lexer.lex(src, opt);\n    } catch (e) {\n      return callback(e);\n    }\n\n    const done = function(err) {\n      let out;\n\n      if (!err) {\n        try {\n          if (opt.walkTokens) {\n            marked.walkTokens(tokens, opt.walkTokens);\n          }\n          out = Parser.parse(tokens, opt);\n        } catch (e) {\n          err = e;\n        }\n      }\n\n      opt.highlight = highlight;\n\n      return err\n        ? callback(err)\n        : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n\n    if (!tokens.length) return done();\n\n    let pending = 0;\n    marked.walkTokens(tokens, function(token) {\n      if (token.type === 'code') {\n        pending++;\n        setTimeout(() => {\n          highlight(token.text, token.lang, function(err, code) {\n            if (err) {\n              return done(err);\n            }\n            if (code != null && code !== token.text) {\n              token.text = code;\n              token.escaped = true;\n            }\n\n            pending--;\n            if (pending === 0) {\n              done();\n            }\n          });\n        }, 0);\n      }\n    });\n\n    if (pending === 0) {\n      done();\n    }\n\n    return;\n  }\n\n  function onError(e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n\n  try {\n    const tokens = Lexer.lex(src, opt);\n    if (opt.walkTokens) {\n      if (opt.async) {\n        return Promise.all(marked.walkTokens(tokens, opt.walkTokens))\n          .then(() => {\n            return Parser.parse(tokens, opt);\n          })\n          .catch(onError);\n      }\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n    return Parser.parse(tokens, opt);\n  } catch (e) {\n    onError(e);\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  merge(marked.defaults, opt);\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\nmarked.getDefaults = getDefaults;\n\nmarked.defaults = defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function(...args) {\n  const extensions = marked.defaults.extensions || { renderers: {}, childTokens: {} };\n\n  args.forEach((pack) => {\n    // copy options to new object\n    const opts = merge({}, pack);\n\n    // set async to true if it was set to true before\n    opts.async = marked.defaults.async || opts.async;\n\n    // ==-- Parse \"addon\" extensions --== //\n    if (pack.extensions) {\n      pack.extensions.forEach((ext) => {\n        if (!ext.name) {\n          throw new Error('extension name required');\n        }\n        if (ext.renderer) { // Renderer extensions\n          const prevRenderer = extensions.renderers[ext.name];\n          if (prevRenderer) {\n            // Replace extension with func to run new extension but fall back if false\n            extensions.renderers[ext.name] = function(...args) {\n              let ret = ext.renderer.apply(this, args);\n              if (ret === false) {\n                ret = prevRenderer.apply(this, args);\n              }\n              return ret;\n            };\n          } else {\n            extensions.renderers[ext.name] = ext.renderer;\n          }\n        }\n        if (ext.tokenizer) { // Tokenizer Extensions\n          if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n            throw new Error(\"extension level must be 'block' or 'inline'\");\n          }\n          if (extensions[ext.level]) {\n            extensions[ext.level].unshift(ext.tokenizer);\n          } else {\n            extensions[ext.level] = [ext.tokenizer];\n          }\n          if (ext.start) { // Function to check for start of token\n            if (ext.level === 'block') {\n              if (extensions.startBlock) {\n                extensions.startBlock.push(ext.start);\n              } else {\n                extensions.startBlock = [ext.start];\n              }\n            } else if (ext.level === 'inline') {\n              if (extensions.startInline) {\n                extensions.startInline.push(ext.start);\n              } else {\n                extensions.startInline = [ext.start];\n              }\n            }\n          }\n        }\n        if (ext.childTokens) { // Child tokens to be visited by walkTokens\n          extensions.childTokens[ext.name] = ext.childTokens;\n        }\n      });\n      opts.extensions = extensions;\n    }\n\n    // ==-- Parse \"overwrite\" extensions --== //\n    if (pack.renderer) {\n      const renderer = marked.defaults.renderer || new Renderer();\n      for (const prop in pack.renderer) {\n        const prevRenderer = renderer[prop];\n        // Replace renderer with func to run extension, but fall back if false\n        renderer[prop] = (...args) => {\n          let ret = pack.renderer[prop].apply(renderer, args);\n          if (ret === false) {\n            ret = prevRenderer.apply(renderer, args);\n          }\n          return ret;\n        };\n      }\n      opts.renderer = renderer;\n    }\n    if (pack.tokenizer) {\n      const tokenizer = marked.defaults.tokenizer || new Tokenizer();\n      for (const prop in pack.tokenizer) {\n        const prevTokenizer = tokenizer[prop];\n        // Replace tokenizer with func to run extension, but fall back if false\n        tokenizer[prop] = (...args) => {\n          let ret = pack.tokenizer[prop].apply(tokenizer, args);\n          if (ret === false) {\n            ret = prevTokenizer.apply(tokenizer, args);\n          }\n          return ret;\n        };\n      }\n      opts.tokenizer = tokenizer;\n    }\n\n    // ==-- Parse WalkTokens extensions --== //\n    if (pack.walkTokens) {\n      const walkTokens = marked.defaults.walkTokens;\n      opts.walkTokens = function(token) {\n        let values = [];\n        values.push(pack.walkTokens.call(this, token));\n        if (walkTokens) {\n          values = values.concat(walkTokens.call(this, token));\n        }\n        return values;\n      };\n    }\n\n    marked.setOptions(opts);\n  });\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function(tokens, callback) {\n  let values = [];\n  for (const token of tokens) {\n    values = values.concat(callback.call(marked, token));\n    switch (token.type) {\n      case 'table': {\n        for (const cell of token.header) {\n          values = values.concat(marked.walkTokens(cell.tokens, callback));\n        }\n        for (const row of token.rows) {\n          for (const cell of row) {\n            values = values.concat(marked.walkTokens(cell.tokens, callback));\n          }\n        }\n        break;\n      }\n      case 'list': {\n        values = values.concat(marked.walkTokens(token.items, callback));\n        break;\n      }\n      default: {\n        if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) { // Walk any extensions\n          marked.defaults.extensions.childTokens[token.type].forEach(function(childTokens) {\n            values = values.concat(marked.walkTokens(token[childTokens], callback));\n          });\n        } else if (token.tokens) {\n          values = values.concat(marked.walkTokens(token.tokens, callback));\n        }\n      }\n    }\n  }\n  return values;\n};\n\n/**\n * Parse Inline\n * @param {string} src\n */\nmarked.parseInline = function(src, opt) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked.parseInline(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked.parseInline(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n\n  try {\n    const tokens = Lexer.lexInline(src, opt);\n    if (opt.walkTokens) {\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n    return Parser.parseInline(tokens, opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n};\n\n/**\n * Expose\n */\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\nmarked.Tokenizer = Tokenizer;\nmarked.Slugger = Slugger;\nmarked.parse = marked;\n\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = Parser.parse;\nconst lexer = Lexer.lex;\n\nexport { Lexer, Parser, Renderer, Slugger, TextRenderer, Tokenizer, defaults, getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n"],"names":["getDefaults","async","baseUrl","breaks","extensions","gfm","headerIds","headerPrefix","highlight","langPrefix","mangle","pedantic","renderer","sanitize","sanitizer","silent","smartypants","tokenizer","walkTokens","xhtml","defaults","escapeTest","escapeReplace","RegExp","source","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape","html","encode","test","replace","unescapeTest","unescape","_","n","toLowerCase","charAt","String","fromCharCode","parseInt","substring","caret","edit","regex","opt","obj","name","val","getRegex","nonWordAndColonTest","originIndependentUrl","cleanUrl","base","href","prot","decodeURIComponent","e","indexOf","baseUrls","justDomain","rtrim","relativeBase","protocol","domain","resolveUrl","encodeURI","noopTest","exec","merge","target","key","i","arguments","length","Object","prototype","hasOwnProperty","call","splitCells","tableRow","count","cells","match","offset","str","escaped","curr","split","trim","shift","pop","splice","push","c","invert","l","suffLen","currChar","slice","checkSanitizeDeprecation","console","warn","repeatString","pattern","result","outputLink","cap","link","raw","lexer","title","text","state","inLink","token","type","tokens","inlineTokens","Tokenizer","constructor","options","this","space","src","rules","block","newline","code","codeBlockStyle","fences","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","indentCodeCompensation","lang","inline","_escapes","heading","trimmed","depth","hr","blockquote","top","blockTokens","list","istask","ischecked","indent","blankLine","endsWithBlankLine","line","nextLine","rawLine","itemContents","endEarly","bull","isordered","ordered","start","loose","items","itemRegex","t","repeat","trimLeft","search","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","task","checked","trimRight","spacers","filter","hasMultipleLineBreaks","some","pre","def","tag","table","item","header","align","rows","j","k","row","lheading","paragraph","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","b","level","findClosingBracket","linkLen","reflink","links","nolink","emStrong","maskedSrc","prevChar","lDelim","nextChar","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","rDelimAst","rDelimUnd","lastIndex","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","prevCapZero","_backpedal","inlineText","_paragraph","_label","_title","bullet","listItemStart","_tag","_comment","normal","reflinkSearch","out","charCodeAt","random","toString","_punctuation","blockSkip","escapedEmSt","_scheme","_email","_attribute","_href","strong","middle","endAst","endUnd","em","_extended_email","Lexer","create","inlineQueue","static","lex","next","lastToken","cutSrc","lastParagraphClipped","leading","tabs","extTokenizer","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","error","Error","keepPrevChar","keys","includes","lastIndexOf","startInline","Renderer","infostring","quote","slugger","slug","body","listitem","checkbox","tablerow","content","tablecell","flags","image","TextRenderer","Slugger","seen","serialize","value","getNextSafeSlug","originalSlug","isDryRun","occurenceAccumulator","dryrun","Parser","textRenderer","parse","parseInline","l2","l3","cell","itemBody","ret","renderers","parser","unshift","marked","callback","done","err","pending","setTimeout","onError","message","Promise","all","then","catch","setOptions","newDefaults","use","args","childTokens","pack","opts","ext","prevRenderer","apply","prop","prevTokenizer","values","concat","lexInline"],"sourceRoot":""}